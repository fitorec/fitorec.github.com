<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programación Orientada a Objetos</title>
    <link>http://fitorec.github.io/itsmigra/programacion_orientada_objetos/</link>
    <description>Recent content on Programación Orientada a Objetos</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-mx</language>
    <copyright>&lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by/4.0/&#34;&gt;&lt;img alt=&#34;Licencia Creative Commons&#34; style=&#34;border-width:0&#34; src=&#34;https://i.creativecommons.org/l/by/4.0/80x15.png&#34; /&gt;&lt;/a&gt;&lt;br /&gt;Esta obra está bajo una &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by/4.0/&#34;&gt;Licencia Creative Commons Atribución 4.0 Internacional&lt;/a&gt;.&lt;br&gt;Sientete libre de compartir y redistribuir</copyright>
    <lastBuildDate>Thu, 11 May 2017 21:32:03 -0500</lastBuildDate>
    
	<atom:link href="http://fitorec.github.io/itsmigra/programacion_orientada_objetos/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>01_fundamentos_lenguaje</title>
      <link>http://fitorec.github.io/itsmigra/programacion_orientada_objetos/unid_01/01_fundamentos_lenguaje/</link>
      <pubDate>Thu, 11 May 2017 21:32:03 -0500</pubDate>
      
      <guid>http://fitorec.github.io/itsmigra/programacion_orientada_objetos/unid_01/01_fundamentos_lenguaje/</guid>
      <description></description>
    </item>
    
    <item>
      <title>3.7 Puntero this y puntero self</title>
      <link>http://fitorec.github.io/itsmigra/programacion_orientada_objetos/unid_03/3.7_puntero_this_and_self/</link>
      <pubDate>Sat, 06 May 2017 11:44:26 -0500</pubDate>
      
      <guid>http://fitorec.github.io/itsmigra/programacion_orientada_objetos/unid_03/3.7_puntero_this_and_self/</guid>
      <description>En POO en ocasiones es necesario hacer referencia al objeto en cuestión, para esto los lenguajes de programación hacen uso de alguna referencia hacia si mismo, de esta forma que this (en Java) o self(en Python) está disponible cuando un método es invocado dentro del contexto de un objeto.
 Esta referencia hace alusión objeto invocador (el objeto al cual el método pertenece).
 3.7.1 Ejemplos: Para que quede mas claro veamos un ejemplo a partir de la clase Alumno vista previamente, pero versión simplificada para fines demostrativos:</description>
    </item>
    
    <item>
      <title>3.6.2 Creación de Objetos con Python</title>
      <link>http://fitorec.github.io/itsmigra/programacion_orientada_objetos/unid_03/3.6_creacion_de_objetos_python/</link>
      <pubDate>Thu, 04 May 2017 19:12:04 -0500</pubDate>
      
      <guid>http://fitorec.github.io/itsmigra/programacion_orientada_objetos/unid_03/3.6_creacion_de_objetos_python/</guid>
      <description>Ahora veamos como definir la clase Alumno con Python.
En python para definir una clase se ocupa la palabra reservada class una clase es un segmento de código por lo cual se encuentra delimitada por su correspondiente identación, veamos como quedaría esta clase con solamente los atributos:
class Alumno: matricula nombre  ¿Modificadores de acceso en Python? En el lenguaje python no existen modificadores de acceso ya que en python no existen atributos o métodos privados, sin embargo en la documentación oficial podemos encontrar una alternativa basada en la convención del doble guión bajo (_ _).</description>
    </item>
    
    <item>
      <title>3.6.1 Creación de Objetos con Java</title>
      <link>http://fitorec.github.io/itsmigra/programacion_orientada_objetos/unid_03/3.6_creacion_de_objetos_java/</link>
      <pubDate>Thu, 04 May 2017 19:11:04 -0500</pubDate>
      
      <guid>http://fitorec.github.io/itsmigra/programacion_orientada_objetos/unid_03/3.6_creacion_de_objetos_java/</guid>
      <description>.content table td.si{ background: #CAFFCA; } .content table td.no{ background: #FFE9ED; }  Una vez definido el UML de las clases podemos ver como quedarían definidos en los lenguajes de programación java y python:
3.6.1 Creancion de objetos con Java: Con java para definir una clase se ocupa la palabra reservada class una clase es un segmento de código por lo cual se encuentra delimitada por los separadores de segmento de código({}), veamos como quedaría esta clase con solamente los atributos:</description>
    </item>
    
    <item>
      <title>3.1. Definición de una Clase</title>
      <link>http://fitorec.github.io/itsmigra/programacion_orientada_objetos/unid_03/3.1.defincion_de_una_clase/</link>
      <pubDate>Thu, 04 May 2017 14:14:18 -0500</pubDate>
      
      <guid>http://fitorec.github.io/itsmigra/programacion_orientada_objetos/unid_03/3.1.defincion_de_una_clase/</guid>
      <description>Una clase es un elemento abstracto compuesta de :
 Atributos: o miembros de clases, los cuales son variables internas. Métodos: Los cuales son funciones que ejecutan determinada tarea.  3.2 Declaración de clases. Ya vimos previamente que una clase se compone principalmeente de dos partes atributos(o miembros de clase) y métodos o funcionalidades.
Por ejemplo imaginemos que queremos modelar a un Alumno para un sistema de Control Escolar, entonces podemos indentificar los siguientes:</description>
    </item>
    
    <item>
      <title>2.0 arreglos</title>
      <link>http://fitorec.github.io/itsmigra/programacion_orientada_objetos/unid_02/arreglos/</link>
      <pubDate>Wed, 03 May 2017 05:11:18 -0500</pubDate>
      
      <guid>http://fitorec.github.io/itsmigra/programacion_orientada_objetos/unid_02/arreglos/</guid>
      <description>Un arreglo es un contenedor de un conjunto de datos, a los que podemos acceder por medio de un indice,
Arreglos en Java. Los arreglos en java tiene una serie de características:
 Un arreglo solo puede contener elementos de un mismo tipo. Un arreglo es un Objeto, esto implica que tiene tanto métodos como atributos. El tamaño de un arreglo es fijo y se determina en el momento que se inicializa.</description>
    </item>
    
    <item>
      <title>temario</title>
      <link>http://fitorec.github.io/itsmigra/programacion_orientada_objetos/temario/</link>
      <pubDate>Sun, 29 Jan 2017 09:32:14 -0500</pubDate>
      
      <guid>http://fitorec.github.io/itsmigra/programacion_orientada_objetos/temario/</guid>
      <description>Lu Ma Mie Jue Vie    
  Unidad Temas      01 Fundamentos del lenguaje. 30 - 01 06 - 03    1.1 Entorno de desarrollo. 1.2 Configuración del entorno de desarrollo. 1.3 Palabras reservadas. 1.4 Comentarios. 1.5 Tipos de datos. 1.6 Variables. 1.7 Constantes. 1.8 Operadores. 1.9 Sentencias. 1.10 Conversión de tipos de datos (cast). 1.11 Estructuras de control.</description>
    </item>
    
  </channel>
</rss>